// This is your complete Prisma schema file with role-based menu authorization
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =======================
// Auth & Role Models
// =======================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  entity    String
  entityId  String
  oldData   Json?
  newData   Json?
  createdAt DateTime @default(now())
  userId    String

  user User @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users           User[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model RolePermission {
  id        String   @id @default(cuid())
  roleId    String?
  menuId    String[]
  authType  String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  role Role? @relation(fields: [roleId], references: [id])

  @@map("role_permissions")
}

// =======================
// Core User
// =======================

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  officerCode String?
  password    String
  roleId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  role            Role             @relation(fields: [roleId], references: [id])
  inspectionTasks InspectionTask[]
  fieldExecutions FieldExecution[]
  seizures        Seizure[]
  labSamples      LabSample[]
  firCases        FIRCase[]
  auditLogs       AuditLog[]
  accounts        Account[]
  sessions        Session[]

  @@map("users")
}

// =======================
// Inspection → Execution → Seizure → Lab → FIR
// =======================

model InspectionTask {
  id             String   @id @default(cuid())
  inspectioncode String   @unique
  userId         String
  datetime       String
  state          String
  district       String
  taluka         String
  location       String
  addressland    String
  targetType     String
  typeofpremises String[]
  visitpurpose   String[]
  equipment      String[]
  totaltarget    String
  achievedtarget String
  status         String   @default("scheduled")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user            User             @relation(fields: [userId], references: [id])
  fieldExecutions FieldExecution[]

  @@map("inspection_tasks")
}

model FieldExecution {
  id                      Int       @id @default(autoincrement())
  inspectionid            String
  fieldcode               String    @unique
  companyname             String
  productname             String
  dealer_name             String
  registration_no         String?
  sampling_date           DateTime?
  fertilizer_type         String
  batch_no                String?
  manufacture_import_date DateTime?
  stock_receipt_date      DateTime?
  sample_code             String?
  stock_position          String?
  physical_condition      String?
  specification_fco       String?
  composition_analysis    String?
  variation               String?
  moisture                Decimal?  @db.Decimal(5, 2)
  total_n                 Decimal?  @db.Decimal(5, 2)
  nh4n                    Decimal?  @db.Decimal(5, 2)
  nh4no3n                 Decimal?  @db.Decimal(5, 2)
  urea_n                  Decimal?  @db.Decimal(5, 2)
  total_p2o5              Decimal?  @db.Decimal(5, 2)
  nac_soluble_p2o5        Decimal?  @db.Decimal(5, 2)
  citric_soluble_p2o5     Decimal?  @db.Decimal(5, 2)
  water_soluble_p2o5      Decimal?  @db.Decimal(5, 2)
  water_soluble_k2o       Decimal?  @db.Decimal(5, 2)
  particle_size           String?
  document                String
  productphoto            String
  userid                  String

  // Relations
  inspectiontask InspectionTask @relation(fields: [inspectionid], references: [id])
  user           User           @relation(fields: [userid], references: [id])
  seizures       Seizure[]

  @@map("field_executions")
}

model Seizure {
  id               String    @id @default(cuid())
  seizurecode      String    @unique
  fieldExecutionId Int
  location         String
  district         String
  taluka           String?
  premises_type    String[]
  fertilizer_type  String?
  batch_no         String?
  quantity         Decimal?  @db.Decimal(10, 2)
  estimatedValue   String?
  witnessName      String?
  evidencePhotos   String[]
  videoEvidence    String?
  status           String    @default("pending")
  remarks          String?
  seizure_date     DateTime?
  memo_no          String?
  officer_name     String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  userId           String
  scanResultId     String?

  // Relations
  user           User           @relation(fields: [userId], references: [id])
  scanResult     ScanResult?    @relation(fields: [scanResultId], references: [id])
  fieldExecution FieldExecution @relation(fields: [fieldExecutionId], references: [id])
  labSamples     LabSample[]
  firCases       FIRCase[]

  @@map("seizures")
}

model LabSample {
  id             Int       @id @default(autoincrement())
  samplecode     String    @unique
  department     String
  sample_desc    String
  district       String
  status         String
  collected_at   DateTime?
  dispatched_at  DateTime?
  received_at    DateTime?
  under_testing  Boolean   @default(false)
  result_status  String?
  report_sent_at DateTime?
  officer_name   String?
  remarks        String?
  userId         String
  seizureId      String?

  // Relations
  user     User      @relation(fields: [userId], references: [id])
  seizure  Seizure?  @relation(fields: [seizureId], references: [id])
  firCases FIRCase[]

  @@map("lab_samples")
}

model FIRCase {
  id               Int       @id @default(autoincrement())
  fircode          String    @unique
  police_station   String
  accused_party    String
  suspect_name     String
  entity_type      String
  street1          String?
  street2          String?
  village          String?
  district         String
  state            String
  license_no       String?
  contact_no       String?
  brand_name       String?
  fertilizer_type  String?
  batch_no         String?
  manufacture_date DateTime?
  expiry_date      DateTime?
  violation_type   String[]
  evidence         String?
  remarks          String?
  userId           String
  labSampleId      Int?

  // Relations
  user      User       @relation(fields: [userId], references: [id])
  labSample LabSample? @relation(fields: [labSampleId], references: [id]) // <-- FIXED
  Seizure   Seizure[]

  @@map("fir_cases")
}

// =======================
// Supporting Models
// =======================

model File {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimetype     String
  size         Int
  path         String
  url          String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("files")
}

model Product {
  id                       String   @id @default(cuid())
  category                 String
  company                  String
  name                     String
  activeIngredient         String?
  composition              String?
  packaging                String[]
  batchFormat              String?
  commonCounterfeitMarkers String[]
  mrp                      Json?
  hologramFeatures         String[]
  bagColor                 String?
  subsidizedRate           Float?
  varieties                String[]
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  // Relations
  scanResults ScanResult[]

  @@unique([category, company, name])
  @@map("products")
}

model ScanResult {
  id                String   @id @default(cuid())
  company           String
  product           String
  batchNumber       String
  authenticityScore Float
  issues            String[]
  recommendation    String
  geoLocation       String
  timestamp         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  productId         String?

  productRef Product?  @relation(fields: [productId], references: [id])
  seizures   Seizure[]

  @@map("scan_results")
}
